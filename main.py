# main.py ‚Äî —á–µ—Å—Ç–Ω—ã–π —Ä–∞–Ω–¥–æ–º-–±–æ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫–∞–Ω–∞–ª–æ–≤
# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: aiogram~=3.4
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞: pip install aiogram~=3.4
#
# –ö–æ–º–∞–Ω–¥—ã:
# /link_channel https://t.me/–∏–º—è_–∫–∞–Ω–∞–ª–∞
# /my_channels
# /start_giveaway <—Å—Å—ã–ª–∫–∞_–∏–ª–∏_id_–∫–∞–Ω–∞–ª–∞> <–∫–æ–ª-–≤–æ_–ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π> <—á–∞—Å—ã | dd.mm.yy HH:MM> <—Ç–µ–∫—Å—Ç...>
# /participants <id>
# /result <id>
# /end_giveaway <id>
#
# –ü—Ä–∏–º–µ—Ä—ã:
# /start_giveaway https://t.me/–∏–º—è–∫–∞–Ω–∞–ª–∞ 2 1 –ë–æ–ª—å—à–æ–π —Ä–æ–∑—ã–≥—Ä—ã—à
# /start_giveaway https://t.me/–∏–º—è–∫–∞–Ω–∞–ª–∞ 1 10.10.25 22:22 –ë–æ–ª—å—à–æ–π —Ä–æ–∑—ã–≥—Ä—ã—à

import logging, sqlite3, random, asyncio, json, html, re
from datetime import datetime, timedelta
from typing import Optional, List, Dict

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command, CommandStart
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties

# ======== CONFIG ========
BOT_TOKEN = "PUT_YOUR_TELEGRAM_BOT_TOKEN_HERE"   # <-- –≤—Å—Ç–∞–≤—å —Ç–æ–∫–µ–Ω
BOT_USERNAME = "YourBotUsername"                 # <-- username –ë–ï–ó @ (–¥–ª—è –¥–∏–ø–ª–∏–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
DATABASE = "giveaways_linked_clean.db"
CHECK_INTERVAL_SEC = 15
# ========================

logging.basicConfig(level=logging.INFO)
bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher(storage=MemoryStorage())

# ======== –í—Ä–µ–º—è (–ú–°–ö) ========
def now_msk() -> datetime:
    return datetime.utcnow() + timedelta(hours=3)

RU_MONTHS_GEN = {
    1:"—è–Ω–≤–∞—Ä—è",2:"—Ñ–µ–≤—Ä–∞–ª—è",3:"–º–∞—Ä—Ç–∞",4:"–∞–ø—Ä–µ–ª—è",5:"–º–∞—è",6:"–∏—é–Ω—è",
    7:"–∏—é–ª—è",8:"–∞–≤–≥—É—Å—Ç–∞",9:"—Å–µ–Ω—Ç—è–±—Ä—è",10:"–æ–∫—Ç—è–±—Ä—è",11:"–Ω–æ—è–±—Ä—è",12:"–¥–µ–∫–∞–±—Ä—è"
}
def format_msk_dmy_hm(dt: datetime) -> str:
    return f"{dt.day} {RU_MONTHS_GEN[dt.month]} –≤ {dt:%H:%M} –ø–æ –ú–°–ö"

def render_time_hint(end_time: datetime) -> str:
    hours_left = (end_time - now_msk()).total_seconds()/3600
    if hours_left >= 24:
        return f"üïí –î–æ {format_msk_dmy_hm(end_time)}"
    hrs = max(1, int(hours_left))
    return f"üïí –î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {hrs} —á."

# ======== –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ ========
def parse_time_arg(arg1: str, arg2_optional: Optional[str]) -> Optional[datetime]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (–ú–°–ö-–Ω–∞–∏–≤–Ω–æ–µ).
      - 'N' (—á–∞—Å—ã)
      - 'dd.mm.yy HH:MM'
    """
    now = now_msk()
    if re.fullmatch(r"\d{1,3}", arg1):
        return now + timedelta(hours=int(arg1))
    if arg2_optional and re.fullmatch(r"\d{2}\.\d{2}\.\d{2}", arg1) and re.fullmatch(r"\d{2}:\d{2}", arg2_optional):
        try:
            return datetime.strptime(f"{arg1} {arg2_optional}", "%d.%m.%y %H:%M")
        except ValueError:
            return None
    return None

# ======== –ë–î ========
def init_db():
    conn = sqlite3.connect(DATABASE)
    c = conn.cursor()
    c.execute("""
    CREATE TABLE IF NOT EXISTS giveaways(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        chat_id INTEGER,
        message_id INTEGER,
        title TEXT,
        owner_id INTEGER,
        active INTEGER DEFAULT 1,
        end_time TEXT,               -- –ú–°–ö (–Ω–∞–∏–≤–Ω–æ–µ)
        winners_count INTEGER DEFAULT 1,
        media_file_id TEXT,
        media_type TEXT,
        final_winner_ids TEXT,       -- JSON list[int], —Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        finalized_at TEXT
    )""")
    c.execute("""
    CREATE TABLE IF NOT EXISTS participants(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        giveaway_id INTEGER,
        user_id INTEGER,
        username TEXT,
        first_name TEXT,
        UNIQUE(giveaway_id, user_id)
    )""")
    c.execute("""
    CREATE TABLE IF NOT EXISTS channel_auth(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        owner_id INTEGER,
        channel_id INTEGER,
        UNIQUE(owner_id, channel_id)
    )""")
    conn.commit(); conn.close()

def create_giveaway_stub(chat_id:int, title:str, end_time:datetime,
                         owner_id:Optional[int], winners_count:int,
                         media_file_id:Optional[str], media_type:Optional[str]) -> int:
    conn = sqlite3.connect(DATABASE); c = conn.cursor()
    c.execute("""INSERT INTO giveaways(chat_id,message_id,title,owner_id,active,end_time,winners_count,media_file_id,media_type,final_winner_ids,finalized_at)
                 VALUES(?,NULL,?,?,1,?,?,?, ?, NULL, NULL)""",
              (chat_id, title, owner_id, end_time.isoformat(), winners_count, media_file_id, media_type))
    gid = c.lastrowid
    conn.commit(); conn.close()
    return gid

def update_giveaway_message_id(gid:int, message_id:int):
    conn=sqlite3.connect(DATABASE); c=conn.cursor()
    c.execute("UPDATE giveaways SET message_id=? WHERE id=?", (message_id, gid))
    conn.commit(); conn.close()

def get_giveaway(gid:int)->Optional[Dict]:
    conn=sqlite3.connect(DATABASE); c=conn.cursor()
    c.execute("""SELECT chat_id,message_id,title,owner_id,active,end_time,winners_count,media_file_id,media_type,final_winner_ids,finalized_at
                 FROM giveaways WHERE id=?""",(gid,))
    r=c.fetchone(); conn.close()
    if not r: return None
    return {
        "chat_id": r[0], "message_id": r[1], "title": r[2],
        "owner_id": r[3], "active": bool(r[4]),
        "end_time": datetime.fromisoformat(r[5]),
        "winners_count": int(r[6]),
        "media_file_id": r[7], "media_type": r[8],
        "final_ids": json.loads(r[9]) if r[9] else None,
        "final_at": r[10]
    }

def set_inactive(gid:int):
    conn=sqlite3.connect(DATABASE); c=conn.cursor()
    c.execute("UPDATE giveaways SET active=0 WHERE id=?", (gid,))
    conn.commit(); conn.close()

def set_final_winners(gid:int, user_ids:List[int]):
    conn=sqlite3.connect(DATABASE); c=conn.cursor()
    c.execute("UPDATE giveaways SET final_winner_ids=?, finalized_at=? WHERE id=?",
              (json.dumps(user_ids), now_msk().isoformat(), gid))
    conn.commit(); conn.close()

def participants(gid:int)->List[Dict]:
    conn=sqlite3.connect(DATABASE); c=conn.cursor()
    c.execute("SELECT user_id,username,first_name FROM participants WHERE giveaway_id=?", (gid,))
    rows=c.fetchall(); conn.close()
    return [{"user_id":r[0], "username":r[1], "first_name":r[2]} for r in rows]

def count_participants(gid:int)->int:
    conn=sqlite3.connect(DATABASE); c=conn.cursor()
    c.execute("SELECT COUNT(*) FROM participants WHERE giveaway_id=?", (gid,))
    n=c.fetchone()[0] or 0; conn.close(); return n

def add_participant(gid:int, user:types.User):
    conn=sqlite3.connect(DATABASE); c=conn.cursor()
    try:
        c.execute("INSERT INTO participants(giveaway_id,user_id,username,first_name) VALUES(?,?,?,?)",
                  (gid, user.id, user.username or "", user.first_name or ""))
        conn.commit()
    except sqlite3.IntegrityError:
        pass
    conn.close()

def remove_participant(gid:int, uid:int):
    conn=sqlite3.connect(DATABASE); c=conn.cursor()
    c.execute("DELETE FROM participants WHERE giveaway_id=? AND user_id=?", (gid, uid))
    conn.commit(); conn.close()

def add_channel_auth(owner_id:int, channel_id:int):
    conn=sqlite3.connect(DATABASE); c=conn.cursor()
    c.execute("INSERT OR IGNORE INTO channel_auth(owner_id,channel_id) VALUES(?,?)", (owner_id, channel_id))
    conn.commit(); conn.close()

def is_channel_allowed_for_user(owner_id:int, channel_id:int)->bool:
    conn=sqlite3.connect(DATABASE); c=conn.cursor()
    c.execute("SELECT 1 FROM channel_auth WHERE owner_id=? AND channel_id=?", (owner_id, channel_id))
    ok = c.fetchone() is not None
    conn.close()
    return ok

def list_user_channels(owner_id:int)->List[int]:
    conn=sqlite3.connect(DATABASE); c=conn.cursor()
    c.execute("SELECT channel_id FROM channel_auth WHERE owner_id=?", (owner_id,))
    rows=c.fetchall(); conn.close()
    return [r[0] for r in rows]

# ======== UI ========
def build_keyboard(gid:int)->InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.row(InlineKeyboardButton(text=f"–£—á–∞—Å—Ç–≤—É—é! ({count_participants(gid)})", callback_data=f"join|{gid}"))
    kb.row(InlineKeyboardButton(text="–°—Ç–∞—Ç—É—Å", callback_data=f"status|{gid}"))
    return kb.as_markup()

def build_result_button(gid:int)->InlineKeyboardMarkup:
    url = f"https://t.me/{BOT_USERNAME}?start=result_{gid}"
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", url=url)]])

def winners_text(users: List[Dict]) -> str:
    if not users:
        return "–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –Ω–µ—Ç (–Ω–µ –±—ã–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)."
    out=[]
    for i,u in enumerate(users, start=1):
        fname = html.escape(u["first_name"] or "")
        if u["username"]:
            out.append(f"{i}) {fname} (@{html.escape(u['username'])})")
        else:
            out.append(f"{i}) {fname} (id:{u['user_id']})")
    return "\n".join(out)

def announce_text(title:str, total:int, winners: List[Dict]) -> str:
    return (
        f"üéâ –ò—Ç–æ–≥–∏ ¬´{html.escape(title)}¬ª\n\n"
        f"–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total}\n"
        f"–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:\n{winners_text(winners)}"
    )

# ======== –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ========
async def is_subscribed(chat_id:int, user_id:int) -> bool:
    try:
        member = await bot.get_chat_member(chat_id, user_id)
        return member.status not in ("left", "kicked")
    except Exception:
        return False

# ======== –ê–≤—Ç–æ—Ç–∞–π–º–µ—Ä ========
async def auto_timer():
    while True:
        await asyncio.sleep(CHECK_INTERVAL_SEC)
        conn=sqlite3.connect(DATABASE); c=conn.cursor()
        c.execute("SELECT id FROM giveaways WHERE active=1")
        ids=[r[0] for r in c.fetchall()]; conn.close()
        for gid in ids:
            g=get_giveaway(gid)
            if g and now_msk()>=g["end_time"]:
                await publish_results(gid)

# ======== –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤ ========
async def publish_results(gid:int):
    g=get_giveaway(gid)
    if not g or not g["active"]: return

    ps=participants(gid); total=len(ps)
    k=max(0, min(g["winners_count"], total))
    winners=random.sample(ps, k) if k else []

    set_final_winners(gid, [u["user_id"] for u in winners])
    set_inactive(gid)

    text = announce_text(g["title"], total, winners)
    kb = build_result_button(gid)

    try:
        if g["media_file_id"] and g["media_type"]=="photo":
            await bot.send_photo(g["chat_id"], g["media_file_id"], caption=text, reply_markup=kb)
        else:
            await bot.send_message(g["chat_id"], text, reply_markup=kb)
    except Exception as e:
        logging.warning(f"send results failed: {e}")

# ======== /start ========
@dp.message(CommandStart())
async def cmd_start(m: Message):
    if m.chat.type != "private": return
    await m.answer(
            "–ú–µ–Ω—é\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/start_giveaway —Å—Å—ã–ª–∫–∞_–∏–ª–∏_id –∫–∞–Ω–∞–ª–∞ –ö–û–õ–ò–ß–ï–°–¢–í–û_–ü–û–ë–ï–î–ò–¢–ï–õ–ï–ô –≤—Ä–µ–º—è_–æ–∫–∞–Ω—á–∞–Ω–∏—è_—Ä–æ–∑—ã–≥—Ä—ã—à–∞ –¢–µ–∫—Å—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∞\n\n"
            "  –í–†–ï–ú–Ø: —á–∏—Å–ª–æ —á–∞—Å–æ–≤ –∏–ª–∏ dd.mm.yy HH:MM (–ø–æ –ú–°–ö)\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "  /start_giveaway https://t.me/—é–∑–µ—Ä–Ω–µ–π–º_–∫–∞–Ω–∞–ª–∞  2 1 –ü—Ä–∏–º–µ—Ä ---‚Üì \n–ß–µ—Ä–µ–∑ —á–∞—Å –≤ –∫–∞–Ω–∞–ª–µ —é–∑–µ—Ä–Ω–µ–º_–∫–∞–Ω–∞–ª –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Ä–æ–∑—ã–≥—Ä—ã—à –Ω–∞ 2 –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Å —Ç–µ–∫—Å—Ç–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–∞: –ü—Ä–∏–º–µ—Ä –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n"
            "  /start_giveaway https://t.me/—é–∑–µ—Ä–Ω–µ–π–º_–∫–∞–Ω–∞–ª–∞  1 10.10.25 22:22 –ë–æ–ª—å—à–æ–π —Ä–æ–∑—ã–≥—Ä—ã—à ---‚Üì \n–í 10.10.25 22:22 –≤ –∫–∞–Ω–∞–ª–µ —é–∑–µ—Ä–Ω–µ–º_–∫–∞–Ω–∞–ª –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Ä–æ–∑—ã–≥—Ä—ã—à –Ω–∞ 2 –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Å —Ç–µ–∫—Å—Ç–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–∞: –ë–æ–ª—å—à–æ–π —Ä–æ–∑—ã–≥—Ä—ã—à –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n\n"
            "/end_giveaway ID ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–≤–æ–π —Ä–æ–∑—ã–≥—Ä—ã—à\n\n"
            "/set_winners ID N ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –≤ —Å–≤–æ—ë–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ\n"
            "/participants ID ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n"
            "/result ID ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n\n"
            "/link_channel https://t.me/—é–∑–µ—Ä–Ω–µ–π–º_–∫–∞–Ω–∞–ª–∞ ‚Äî –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–≤–æ–π –∫–∞–Ω–∞–ª\n\n"
            "/my_channels ‚Äî —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"
    )

    # deep-link: /start result_<id>
    if m.text and " " in m.text:
        _, payload = m.text.split(" ", 1)
        if payload.startswith("result_"):
            try:
                gid = int(payload.split("_", 1)[1])
                await show_result_to_user(m.from_user.id, gid)
            except Exception:
                pass

# ======== –ü—Ä–∏–≤—è–∑–∫–∞ –∫–∞–Ω–∞–ª–∞ ========
@dp.message(Command("link_channel"))
async def link_channel(m: Message):
    if m.chat.type != "private": return
    args = m.text.split(maxsplit=1)
    if len(args) < 2:
        return await m.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /link_channel https://t.me/–∏–º—è_–∫–∞–Ω–∞–ª–∞")

    link = args[1].strip()
    if not link.startswith("https://t.me/") or "/joinchat/" in link or "+" in link:
        return await m.reply("–ù—É–∂–Ω–∞ —Å—Å—ã–ª–∫–∞ –≤–∏–¥–∞ https://t.me/–∏–º—è_–∫–∞–Ω–∞–ª–∞ (–ø—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª).")

    slug = link.split("/")[-1]
    try:
        chat = await bot.get_chat(f"@{slug}")
        channel_id = chat.id
    except Exception:
        return await m.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª –ø–æ —Å—Å—ã–ª–∫–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∫–∞–Ω–∞–ª –ø—É–±–ª–∏—á–Ω—ã–π –∏ –≤–∏–¥–∏–º—ã–π –±–æ—Ç—É.")

    uid = m.from_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –∏ –±–æ—Ç, –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω—ã –∫–∞–Ω–∞–ª–∞
    try:
        me = await bot.get_me()
        bm = await bot.get_chat_member(channel_id, me.id)
        if bm.status not in ("administrator", "creator"):
            return await m.reply("–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º –≤ –∫–∞–Ω–∞–ª–µ.")
        um = await bot.get_chat_member(channel_id, uid)
        if um.status not in ("administrator", "creator"):
            return await m.reply("–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ.")
    except Exception:
        return await m.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –≤ –∫–∞–Ω–∞–ª–µ.")

    add_channel_auth(uid, channel_id)
    await m.reply(f"–ö–∞–Ω–∞–ª ¬´{chat.title}¬ª –ø—Ä–∏–≤—è–∑–∞–Ω.")

@dp.message(Command("my_channels"))
async def my_channels(m: Message):
    if m.chat.type != "private": return
    uid = m.from_user.id
    chs = list_user_channels(uid)
    if not chs:
        return await m.reply("–ù–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –î–æ–±–∞–≤—å—Ç–µ: /link_channel https://t.me/–≤–∞—à_–∫–∞–Ω–∞–ª")
    lines=[]
    for cid in chs:
        try:
            chat = await bot.get_chat(cid)
            lines.append(f"{chat.title} ({cid})")
        except Exception:
            lines.append(str(cid))
    await m.reply("–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:\n" + "\n".join(lines))

# ======== –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ ========
@dp.message(Command("start_giveaway"))
async def start_giveaway(m: Message):
    if m.chat.type != "private":
        return await m.reply("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –ª–∏—á–∫—É –±–æ—Ç—É.")

    # /start_giveaway <–∫–∞–Ω–∞–ª> <winners> <time | dd.mm.yy HH:MM> <title...>
    tokens = m.text.strip().split()
    if len(tokens) < 5:
        return await m.reply(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "/start_giveaway –°–°–´–õ–ö–ê_–ò–õ–ò_ID –ö–û–õ–í–û_–ü–û–ë–ï–î–ò–¢–ï–õ–ï–ô –í–†–ï–ú–Ø –ù–ê–ó–í–ê–ù–ò–ï\n"
            "–í–†–ï–ú–Ø: —á–∞—Å—ã –∏–ª–∏ dd.mm.yy HH:MM\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "/start_giveaway https://t.me/mychan 2 1 Nitro\n"
            "/start_giveaway https://t.me/mychan 1 10.10.25 22:22 –ë–æ–ª—å—à–æ–π —Ä–æ–∑—ã–≥—Ä—ã—à"
        )

    ch_arg = tokens[1]
    winners_str = tokens[2]
    time_token_1 = tokens[3]
    time_token_2 = tokens[4] if len(tokens) >= 6 and re.fullmatch(r"\d{2}:\d{2}", tokens[4]) and re.fullmatch(r"\d{2}\.\d{2}\.\d{2}", tokens[3]) else None
    title_start_index = 4 if time_token_2 is None else 5
    if title_start_index >= len(tokens):
        return await m.reply("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏.")
    title = " ".join(tokens[title_start_index:])

    # –∫–∞–Ω–∞–ª: —Å—Å—ã–ª–∫–∞ –∏–ª–∏ id
    if ch_arg.startswith("https://t.me/"):
        slug = ch_arg.split("/")[-1]
        try:
            chat = await bot.get_chat(f"@{slug}")
            channel_id = chat.id
        except Exception:
            return await m.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª –ø–æ —Å—Å—ã–ª–∫–µ.")
    else:
        try:
            channel_id = int(ch_arg)
        except Exception:
            return await m.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞.")

    uid = m.from_user.id
    # –∫–∞–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if not is_channel_allowed_for_user(uid, channel_id):
        return await m.reply("–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /link_channel.")

    # –∫–æ–ª-–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
    try:
        winners_count = max(0, int(winners_str))
    except ValueError:
        return await m.reply("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

    # –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
    end_time = parse_time_arg(time_token_1, time_token_2)
    if not end_time:
        return await m.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä—ã: 2  –∏–ª–∏  10.10.25 22:22")
    if end_time <= now_msk():
        return await m.reply("–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.")

    # –º–µ–¥–∏–∞: —Ñ–æ—Ç–æ –≤ —Ç–æ–π –∂–µ –∫–æ–º–∞–Ω–¥–µ (–∏–ª–∏ –≤ —Ä–µ–ø–ª–∞–µ ‚Äî –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç)
    media_file_id = media_type = None
    if m.photo:
        media_file_id = m.photo[-1].file_id; media_type = "photo"
    elif m.reply_to_message and m.reply_to_message.photo:
        media_file_id = m.reply_to_message.photo[-1].file_id; media_type = "photo"

    gid = create_giveaway_stub(
        chat_id=channel_id,
        title=title,
        end_time=end_time,
        owner_id=uid,
        winners_count=winners_count,
        media_file_id=media_file_id,
        media_type=media_type
    )
    time_hint = render_time_hint(end_time)
    text = f"{html.escape(title)}\n\n{time_hint}\n–ù–∞–∂–º–∏ ¬´–£—á–∞—Å—Ç–≤—É—é!¬ª —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ."

    try:
        if media_file_id and media_type == "photo":
            sent = await bot.send_photo(channel_id, media_file_id, caption=text, reply_markup=build_keyboard(gid))
        else:
            sent = await bot.send_message(channel_id, text, reply_markup=build_keyboard(gid))
        update_giveaway_message_id(gid, sent.message_id)
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–æ—Å—Ç–∏—Ç—å ‚Äî —É–¥–∞–ª–∏–º —á–µ—Ä–Ω–æ–≤–∏–∫
        conn=sqlite3.connect(DATABASE); c=conn.cursor()
        c.execute("DELETE FROM giveaways WHERE id=?", (gid,)); conn.commit(); conn.close()
        return await m.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–æ—Ç ‚Äî –∞–¥–º–∏–Ω –∏ –º–æ–∂–µ—Ç –ø–æ—Å—Ç–∏—Ç—å.")

    await m.reply(f"–†–æ–∑—ã–≥—Ä—ã—à #{gid} —Å–æ–∑–¥–∞–Ω. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: {format_msk_dmy_hm(end_time)}. –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {winners_count}")

# ======== –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å) ========
@dp.message(Command("end_giveaway"))
async def end_giveaway(m: Message):
    if m.chat.type != "private": return
    args=m.text.split()
    if len(args)<2: return await m.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /end_giveaway ID")
    gid=int(args[1])
    g=get_giveaway(gid)
    if not g: return await m.reply("–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    if not g["active"]: return await m.reply("–†–æ–∑—ã–≥—Ä—ã—à —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω.")
    if g["owner_id"] != m.from_user.id:
        return await m.reply("–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Ä—É—á–Ω—É—é –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å. –î–æ–∂–¥–∏—Ç–µ—Å—å –∞–≤—Ç–æ-–∏—Ç–æ–≥–æ–≤.")
    await publish_results(gid)
    await m.reply("–ò—Ç–æ–≥–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –≤ –∫–∞–Ω–∞–ª–µ.")

# ======== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã (deep link –∏ –∫–æ–º–∞–Ω–¥–∞) ========
@dp.message(Command("result"))
async def cmd_result(m: Message):
    # –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –≤ –õ–°
    args=m.text.split()
    if len(args)<2: return await m.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /result ID")
    gid=int(args[1]); await show_result_to_user(m.from_user.id, gid)

async def show_result_to_user(uid:int, gid:int):
    g=get_giveaway(gid)
    if not g:
        return await bot.send_message(uid, "–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    ps=participants(gid); total=len(ps)

    if g["active"]:
        text=(f"–†–æ–∑—ã–≥—Ä—ã—à #{gid} ¬´{html.escape(g['title'])}¬ª –µ—â—ë –∏–¥—ë—Ç.\n"
              f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: {format_msk_dmy_hm(g['end_time'])}\n"
              f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total}")
        return await bot.send_message(uid, text)

    winners=[]
    if g["final_ids"]:
        uidset=set(g["final_ids"])
        winners=[p for p in ps if p["user_id"] in uidset]

    text=announce_text(g["title"], total, winners)
    await bot.send_message(uid, f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ #{gid}:\n\n{text}")

# ======== –£—á–∞—Å—Ç–Ω–∏–∫–∏ ========
@dp.message(Command("participants"))
async def participants_cmd(m: Message):
    args=m.text.split()
    if len(args)<2:
        return await m.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /participants ID")
    gid=int(args[1])
    ps=participants(gid)
    if not ps:
        return await m.reply("–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
    txt = "–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n" + "\n".join(
        f"{i+1}) {html.escape(p['first_name'] or '')} (@{html.escape(p['username'])})"
        if p["username"] else
        f"{i+1}) {html.escape(p['first_name'] or '')} (id:{p['user_id']})"
        for i,p in enumerate(ps)
    )
    await m.reply(txt[:4000])

# ======== –ö–Ω–æ–ø–∫–∏ —É—á–∞—Å—Ç–∏—è ========
@dp.callback_query(F.data.startswith("join|"))
async def join(cq: CallbackQuery):
    try:
        gid=int(cq.data.split("|",1)[1])
    except Exception:
        return await cq.answer("–ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞.")
    g=get_giveaway(gid)
    if not g or not g["active"]:
        return await cq.answer("–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à—ë–Ω.")

    if not await is_subscribed(g["chat_id"], cq.from_user.id):
        return await cq.answer("–ß—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª.", show_alert=True)

    ids={p["user_id"] for p in participants(gid)}
    if cq.from_user.id in ids:
        remove_participant(gid, cq.from_user.id); msg="–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–æ–∑—ã–≥—Ä—ã—à–∞."
    else:
        add_participant(gid, cq.from_user); msg="–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ!"

    try:
        await bot.edit_message_reply_markup(g["chat_id"], g["message_id"], reply_markup=build_keyboard(gid))
    except Exception:
        pass

    await cq.answer(msg)

@dp.callback_query(F.data.startswith("status|"))
async def status(cq: CallbackQuery):
    gid=int(cq.data.split("|",1)[1])
    await cq.answer(f"–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {count_participants(gid)}", show_alert=False)

# ======== –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ ========
async def main():
    init_db()
    asyncio.create_task(auto_timer())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

